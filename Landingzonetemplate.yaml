AWSTemplateFormatVersion: 2010-09-09
Description: 

Resources:
  VPC:
    name: Security
    region: us-gov-west
    cidrs:
      - 10.0.0.0/16
    internetGateway: true
    enableDnsHostnames: true
    enableDnsSupport: true
    instanceTenancy: default
    routeTables:
      - name: Internet_facing_route table
        routes:
          - name: TgwRoute
            destination: 10.0.0.0/8
            type: transitGateway
            target: Network-Main
          - name: IgwRoute
            destination: 0.0.0.0/0
            type: internetGateway
            target: IGW
      - name: Network-Boundary-Untrust-Rt-B
        routes:
          - name: TgwRoute
            destination: 10.0.0.0/8
            type: transitGateway
            target: Network-Main
          - name: IgwRoute
            destination: 0.0.0.0/0
            type: internetGateway
            target: IGW
      - name: Network-Boundary-Trust-Rt-A
      - name: Network-Boundary-Trust-Rt-B
      - name: Network-Boundary-Management-Rt-A
        routes:
          - name: IgwRoute
            destination: 0.0.0.0/0
            type: internetGateway
            target: IGW
      - name: Network-Boundary-Management-Rt-B
        routes:
          - name: IgwRoute
            destination: 0.0.0.0/0
            type: internetGateway
            target: IGW
      - name: Network-Boundary-TgwAttach-Rt-A
        routes:
          - name: NatRoute
            destination: 0.0.0.0/0
            type: natGateway
            target: Network-Boundary-NatGw-A
      - name: Network-Boundary-TgwAttach-Rt-B
        routes:
          - name: NatRoute
            destination: 0.0.0.0/0
            type: natGateway
            target: Network-Boundary-NatGw-B
    subnets:
      - name:security-subnet-private1-us-gov-west-1a
        availabilityZone: a
        routeTable: Network-Boundary-Untrust-Rt-A
        ipv4CidrBlock: 10.0.0.0/24
      - name: security-subnet-private2-us-gov-west-1b
        availabilityZone: b
        routeTable: Network-Boundary-Untrust-Rt-B
        ipv4CidrBlock: 10.0.1.0/24
      - name: security-subnet-private3-us-gov-west-1c
        availabilityZone: c
        routeTable: Network-Boundary-Trust-Rt-A
        ipv4CidrBlock: 10.0.2.0/24
      - name: security-subnet-public1-us-gov-west-1a
        availabilityZone: a
        routeTable: Network-Boundary-Trust-Rt-B
        ipv4CidrBlock: 10.0.3.0/24
      - name: security-subnet-public2-us-gov-west-1b
        availabilityZone: b
        routeTable: Network-Boundary-Management-Rt-A
        ipv4CidrBlock: 10.0.4.0/24
      - name: security-subnet-public3-us-gov-west-1c
        availabilityZone: c
        routeTable: Network-Boundary-Management-Rt-B
        ipv4CidrBlock: 10.0.5.0/24
    natGateways:
      - name: Network-Boundary-NatGw-A
        subnet: Network-Boundary-Untrust-A
      - name: Network-Boundary-NatGw-B
        subnet: Network-Boundary-Untrust-B
    transitGatewayAttachments:
      - name: Network-Boundary
        transitGateway:
          name: Network-Main
          account: Network
        routeTableAssociations:
          - Network-Main-Network-Boundary
        routeTablePropagations:
          - Network-Main-Internal
          - Network-Main-SharedServices-Main
        subnets:
          - Network-Boundary-TgwAttach-A
          - Network-Boundary-TgwAttach-B
# Shared Services Account
  # SharedServices-Main VPC
  # This vpc creates 3 subnets in each AZs
  # Subnets includes app, data and tgw attach.
  ### This vpc host sharedsevices applications.
  - name: SharedServices
    region: us-gov-west
    cidrs:
      - 10.1.0.0/20
    internetGateway: false
    enableDnsHostnames: true
    enableDnsSupport: true
    instanceTenancy: default
    routeTables:
      - name: SharedServices-Main-App-Rt-A
        routes:
          - name: TgwRoute
            destination: 0.0.0.0/0
            type: transitGateway
            target: Network-Main
      - name: SharedServices-Main-App-Rt-B
        routes:
          - name: TgwRoute
            destination: 0.0.0.0/0
            type: transitGateway
            target: Network-Main
      - name: SharedServices-Main-Database-Rt-A
      - name: SharedServices-Main-Database-Rt-B
      - name: SharedServices-Main-TgwAttach-Rt-A
      - name: SharedServices-Main-TgwAttach-Rt-B
    subnets:
      - name: sharedservices-subnet-private1-us-gov-west-1a
        availabilityZone: a
        routeTable: SharedServices-Main-App-Rt-A
        ipv4CidrBlock: 10.1.0.0/24
      - name: sharedservices-subnet-private2-us-gov-west-1b
        availabilityZone: b
        routeTable: SharedServices-Main-App-Rt-B
        ipv4CidrBlock: 10.1.1.0/24
      - name: sharedservices-subnet-private3-us-gov-west-1c
        availabilityZone: c
        routeTable: SharedServices-Main-Database-Rt-A
        ipv4CidrBlock: 10.1.2.0/24
      - name: sharedservices-subnet-public1-us-gov-west-1a
        availabilityZone: a
        routeTable: SharedServices-Main-Database-Rt-B
        ipv4CidrBlock: 10.1.3.0/24
      - name: sharedservices-subnet-public2-us-gov-west-1b
        availabilityZone: b
        routeTable: SharedServices-Main-TgwAttach-Rt-A
        ipv4CidrBlock: 10.1.4.0/24
      - name: sharedservices-subnet-public3-us-gov-west-1c
        availabilityZone: c
        routeTable: SharedServices-Main-TgwAttach-Rt-B
        ipv4CidrBlock: 10.1.5.0/24
    transitGatewayAttachments:
      - name: SharedServices-Main
        transitGateway:
          name: Network-Main
          account: Network
        routeTableAssociations:
          - Network-Main-SharedServices-Main
        routeTablePropagations:
          - Network-Main-Internal
          - Network-Main-Network-Boundary
        subnets:
          - SharedServices-Main-TgwAttach-A
          - SharedServices-Main-TgwAttach-B
# App VPC
  # This vpc creates 3 subnets in each AZs
  - name: App
    region: us-gov-west
    cidrs:
      - 10.5.0.0/16
    internetGateway: false
    enableDnsHostnames: true
    enableDnsSupport: true
    instanceTenancy: default
    routeTables:
      - name: App-Main-App-Rt-A
        routes:
          - name: TgwRoute
            destination: 0.0.0.0/0
            type: transitGateway
            target: Network-Main
      - name: App-Main-App-Rt-B
        routes:
          - name: TgwRoute
            destination: 0.0.0.0/0
            type: transitGateway
            target: Network-Main
      - name: App-Main-Database-Rt-A
      - name: App-Main-Database-Rt-B
      - name: App-Main-TgwAttach-Rt-A
      - name: App-Main-TgwAttach-Rt-B
    subnets:
      - name: app-subnet-private1-us-gov-west-1a
        availabilityZone: a
        routeTable: App-Main-App-Rt-A
        ipv4CidrBlock: 10.5.0.0/24
      - name: app-subnet-private2-us-gov-west-1b
        availabilityZone: b
        routeTable: App-Main-App-Rt-B
        ipv4CidrBlock: 10.5.1.0/24
      - name: app-subnet-private3-us-gov-west-1c
        availabilityZone: c
        routeTable: App-Main-Database-Rt-A
        ipv4CidrBlock: 10.5.2.0/24
      - name: app-subnet-public1-us-gov-west-1a
        availabilityZone: a
        routeTable: App-Main-Database-Rt-B
        ipv4CidrBlock: 10.5.3.0/24
      - name: app-subnet-public2-us-gov-west-1b
        availabilityZone: b 
        routeTable: App-Main-TgwAttach-Rt-A
        ipv4CidrBlock: 10.5.4.0/24
      - name: app-subnet-public3-us-gov-west-1c
        availabilityZone: c
        routeTable: App-Main-TgwAttach-Rt-B
        ipv4CidrBlock: 10.5.5.0/24
    transitGatewayAttachments:
      - name: App-Main
        transitGateway:
          name: Network-Main
          account: Network
        routeTableAssociations:
          - Network-Main-App-Main
        routeTablePropagations:
          - Network-Main-Internal
          - Network-Main-Network-Boundary
        subnets:
          - App-Main-TgwAttach-A
          - App-Main-TgwAttach-B

##############################################################
# Global configuration for VPC flow logs                     #
 ##############################################################
vpcFlowLogs:
  trafficType: ALL
  maxAggregationInterval: 600
  destinations:
    - cloud-watch-logs
  destinationsConfig:
    cloudWatchLogs:
      retentionInDays: 30
  defaultFormat: false
  customFields:
    - version
    - account-id
    - interface-id
    - srcaddr
    - dstaddr
    - srcport
    - dstport
    - protocol
    - packets
    - bytes
    - start
    - end
    - action
    - log-status
    - vpc-id
    - subnet-id
    - instance-id
    - tcp-flags
    - type
    - pkt-srcaddr
    - pkt-dstaddr
    - region
    - az-id
    - pkt-src-aws-service
    - pkt-dst-aws-service
    - flow-direction
    - traffic-path

logging:
  cloudtrail:
    enable: false
    organizationTrail: false
    organizationTrailSettings:
      multiRegionTrail: true
      globalServiceEvents: true
      managementEvents: true
      s3DataEvents: true
      lambdaDataEvents: true
      sendToCloudWatchLogs: true
      apiErrorRateInsight: false
      apiCallRateInsight: false
  sessionManager:
    sendToCloudWatchLogs: false
    sendToS3: true
    attachPolicyToIamRoles:
      - EC2-Default-SSM-AD-Role
  cloudwatchLogs:
    dynamicPartitioning: dynamic-partitioning/log-filters.json
  accessLogBucket:
    # Update the retention time based on compliance and auditing requirements
    # Defining and storing access log Bucket for 365 days
    lifecycleRules:
      - enabled: true
        abortIncompleteMultipartUpload: 7
        expiration: 365
        noncurrentVersionExpiration: 365
  centralLogBucket:
    # Defining and storing storing log Bucket for 365 days
    lifecycleRules:
      - enabled: true
        abortIncompleteMultipartUpload: 7
        expiration: 365
        noncurrentVersionExpiration: 365
  elbLogBucket:
    # Defining and storing storing log Bucket for 365 days
    lifecycleRules:
      - enabled: true
        abortIncompleteMultipartUpload: 7
        expiration: 365
        noncurrentVersionExpiration: 365

cloudWatch:
  metricSets:
    - regions:
        - *HOME_REGION
      deploymentTargets:
        accounts:
          - Management
      metrics:
        # CIS 1.1 – Avoid the use of the "root" account
        - filterName: RootAccountMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: '{$.userIdentity.type="Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !="AwsServiceEvent"}'
          metricNamespace: LogMetrics
          metricName: RootAccount
          metricValue: "1"
        # CIS 3.1 – Ensure a log metric filter and alarm exist for unauthorized API calls
        - filterName: UnauthorizedAPICallsMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: '{($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")}'
          metricNamespace: LogMetrics
          metricName: UnauthorizedAPICalls
          metricValue: "1"
        # CIS 3.2 – Ensure a log metric filter and alarm exist for AWS Management Console sign-in without MFA
        - filterName: ConsoleSigninWithoutMFAMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: '{($.eventName = "ConsoleLogin") && ($.additionalEventData.MFAUsed != "Yes") && ($.userIdentity.type = "IAMUser") && ($.responseElements.ConsoleLogin = "Success")}'
          metricNamespace: LogMetrics
          metricName: ConsoleSigninWithoutMFA
          metricValue: "1"
        # CIS 3.3 – Ensure a log metric filter and alarm exist for usage of "root" account
        - filterName: MetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: '{$.userIdentity.type="Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !="AwsServiceEvent"}'
          metricNamespace: LogMetrics
          metricName: RootAccountUsage
          metricValue: "1"
        # CIS 3.4 – Ensure a log metric filter and alarm exist for IAM policy changes
        - filterName: IAMPolicyChangesMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventName=DeleteGroupPolicy) || ($.eventName=DeleteRolePolicy) || ($.eventName=DeleteUserPolicy) || ($.eventName=PutGroupPolicy) || ($.eventName=PutRolePolicy) || ($.eventName=PutUserPolicy) || ($.eventName=CreatePolicy) || ($.eventName=DeletePolicy) || ($.eventName=CreatePolicyVersion) || ($.eventName=DeletePolicyVersion) || ($.eventName=AttachRolePolicy) || ($.eventName=DetachRolePolicy) || ($.eventName=AttachUserPolicy) || ($.eventName=DetachUserPolicy) || ($.eventName=AttachGroupPolicy) || ($.eventName=DetachGroupPolicy)}"
          metricNamespace: LogMetrics
          metricName: IAMPolicyChanges
          metricValue: "1"
        # CIS 3.5 – Ensure a log metric filter and alarm exist for CloudTrail configuration changes
        - filterName: CloudTrailChangesMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventName=CreateTrail) || ($.eventName=UpdateTrail) || ($.eventName=DeleteTrail) || ($.eventName=StartLogging) || ($.eventName=StopLogging)}"
          metricNamespace: LogMetrics
          metricName: CloudTrailChanges
          metricValue: "1"
        # CIS 3.6 – Ensure a log metric filter and alarm exist for AWS Management Console authentication failures
        - filterName: ConsoleAuthenticationFailureMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: '{($.eventName=ConsoleLogin) && ($.errorMessage="Failed authentication")}'
          metricNamespace: LogMetrics
          metricName: ConsoleAuthenticationFailure
          metricValue: "1"
        # CIS 3.7 – Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs
        - filterName: DisableOrDeleteCMKMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventSource=kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}"
          metricNamespace: LogMetrics
          metricName: DisableOrDeleteCMK
          metricValue: "1"
        # CIS 3.8 – Ensure a log metric filter and alarm exist for S3 bucket policy changes
        - filterName: S3BucketPolicyChangesMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventSource=s3.amazonaws.com) && (($.eventName=PutBucketAcl) || ($.eventName=PutBucketPolicy) || ($.eventName=PutBucketCors) || ($.eventName=PutBucketLifecycle) || ($.eventName=PutBucketReplication) || ($.eventName=DeleteBucketPolicy) || ($.eventName=DeleteBucketCors) || ($.eventName=DeleteBucketLifecycle) || ($.eventName=DeleteBucketReplication))}"
          metricNamespace: LogMetrics
          metricName: S3BucketPolicyChanges
          metricValue: "1"
        # CIS 3.9 – Ensure a log metric filter and alarm exist for AWS Config configuration changes
        - filterName: AWSConfigChangesMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventSource=config.amazonaws.com) && (($.eventName=StopConfigurationRecorder) || ($.eventName=DeleteDeliveryChannel) || ($.eventName=PutDeliveryChannel) || ($.eventName=PutConfigurationRecorder))}"
          metricNamespace: LogMetrics
          metricName: AWSConfigChanges
          metricValue: "1"
        # CIS 3.10 – Ensure a log metric filter and alarm exist for security group changes
        - filterName: SecurityGroupChangesMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventName=AuthorizeSecurityGroupIngress) || ($.eventName=AuthorizeSecurityGroupEgress) || ($.eventName=RevokeSecurityGroupIngress) || ($.eventName=RevokeSecurityGroupEgress) || ($.eventName=CreateSecurityGroup) || ($.eventName=DeleteSecurityGroup)}"
          metricNamespace: LogMetrics
          metricName: SecurityGroupChanges
          metricValue: "1"
        # CIS 3.11 – Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)
        - filterName: NetworkACLChangesMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventName=CreateNetworkAcl) || ($.eventName=CreateNetworkAclEntry) || ($.eventName=DeleteNetworkAcl) || ($.eventName=DeleteNetworkAclEntry) || ($.eventName=ReplaceNetworkAclEntry) || ($.eventName=ReplaceNetworkAclAssociation)}"
          metricNamespace: LogMetrics
          metricName: NetworkACLChanges
          metricValue: "1"
        # CIS 3.12 – Ensure a log metric filter and alarm exist for changes to network gateways
        - filterName: NetworkGatewayChangesMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventName=CreateCustomerGateway) || ($.eventName=DeleteCustomerGateway) || ($.eventName=AttachInternetGateway) || ($.eventName=CreateInternetGateway) || ($.eventName=DeleteInternetGateway) || ($.eventName=DetachInternetGateway)}"
          metricNamespace: LogMetrics
          metricName: NetworkGatewayChanges
          metricValue: "1"
        # CIS 3.13 – Ensure a log metric filter and alarm exist for route table changes
        - filterName: RouteTableChangesMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventName=CreateRoute) || ($.eventName=CreateRouteTable) || ($.eventName=ReplaceRoute) || ($.eventName=ReplaceRouteTableAssociation) || ($.eventName=DeleteRouteTable) || ($.eventName=DeleteRoute) || ($.eventName=DisassociateRouteTable)}"
          metricNamespace: LogMetrics
          metricName: RouteTableChanges
          metricValue: "1"
        # CIS 3.14 – Ensure a log metric filter and alarm exist for VPC changes
        - filterName: VPCChangesMetricFilter
          logGroupName: aws-controltower/CloudTrailLogs
          filterPattern: "{($.eventName=CreateVpc) || ($.eventName=DeleteVpc) || ($.eventName=ModifyVpcAttribute) || ($.eventName=AcceptVpcPeeringConnection) || ($.eventName=CreateVpcPeeringConnection) || ($.eventName=DeleteVpcPeeringConnection) || ($.eventName=RejectVpcPeeringConnection) || ($.eventName=AttachClassicLinkVpc) || ($.eventName=DetachClassicLinkVpc) || ($.eventName=DisableVpcClassicLink) || ($.eventName=EnableVpcClassicLink)}"
          metricNamespace: LogMetrics
          metricName: VPCChanges
          metricValue: "1"
  alarmSets:
    - regions:
        - *HOME_REGION
      deploymentTargets:
        accounts:
          - Management
      alarms:
        # CIS 1.1 – Avoid the use of the "root" account
        - alarmName: CIS-1.1-RootAccountUsage
          alarmDescription: Alarm for usage of "root" account
          snsTopicName: Security
          metricName: RootAccountUsage
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.1 – Ensure a log metric filter and alarm exist for unauthorized API calls
        - alarmName: CIS-3.1-UnauthorizedAPICalls
          alarmDescription: Alarm for unauthorized API calls
          snsTopicName: Security
          metricName: UnauthorizedAPICalls
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Average
          threshold: 5
          treatMissingData: notBreaching
        # CIS 3.2 – Ensure a log metric filter and alarm exist for AWS Management Console sign-in without MFA
        - alarmName: CIS-3.2-ConsoleSigninWithoutMFA
          alarmDescription: Alarm for AWS Management Console sign-in without MFA
          snsTopicName: Security
          metricName: ConsoleSigninWithoutMFA
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.3 – Ensure a log metric filter and alarm exist for usage of "root" account
        - alarmName: CIS-3.3-RootAccountUsage
          alarmDescription: Alarm for usage of "root" account
          snsTopicName: Security
          metricName: RootAccountUsage
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.4 – Ensure a log metric filter and alarm exist for IAM policy changes
        - alarmName: CIS-3.4-IAMPolicyChanges
          alarmDescription: Alarm for IAM policy changes
          snsTopicName: Security
          metricName: IAMPolicyChanges
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Average
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.5 – Ensure a log metric filter and alarm exist for CloudTrail configuration changes
        - alarmName: CIS-3.5-CloudTrailChanges
          alarmDescription: Alarm for CloudTrail configuration changes
          snsTopicName: Security
          metricName: CloudTrailChanges
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.6 – Ensure a log metric filter and alarm exist for AWS Management Console authentication failures
        - alarmName: CIS-3.6-ConsoleAuthenticationFailure
          alarmDescription: Alarm exist for AWS Management Console authentication failures
          snsTopicName: Security
          metricName: ConsoleAuthenticationFailure
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.7 – Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs
        - alarmName: CIS-3.7-DisableOrDeleteCMK
          alarmDescription: Alarm for disabling or scheduled deletion of customer created CMKs
          snsTopicName: Security
          metricName: DisableOrDeleteCMK
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.8 – Ensure a log metric filter and alarm exist for S3 bucket policy changes
        - alarmName: CIS-3.8-S3BucketPolicyChanges.
          alarmDescription: Alarm for S3 bucket policy changes
          snsTopicName: Security
          metricName: S3BucketPolicyChanges
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Average
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.9 – Ensure a log metric filter and alarm exist for AWS Config configuration changes
        - alarmName: CIS-3.9-AWSConfigChanges
          alarmDescription: Alarm for AWS Config configuration changes
          snsTopicName: Security
          metricName: AWSConfigChanges
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.10 – Ensure a log metric filter and alarm exist for security group changes
        - alarmName: CIS-3.10-SecurityGroupChanges
          alarmDescription: Alarm for security group changes
          snsTopicName: Security
          metricName: SecurityGroupChanges
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.11 – Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)
        - alarmName: CIS-3.11-NetworkACLChanges
          alarmDescription: Alarm for changes to Network Access Control Lists (NACL)
          snsTopicName: Security
          metricName: NetworkACLChanges
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.12 – Ensure a log metric filter and alarm exist for changes to network gateways
        - alarmName: CIS-3.12-NetworkGatewayChanges
          alarmDescription: Alarm for changes to network gateways
          snsTopicName: Security
          metricName: NetworkGatewayChanges
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.13 – Ensure a log metric filter and alarm exist for route table changes
        - alarmName: CIS-3.13-RouteTableChanges
          alarmDescription: Alarm for route table changes
          snsTopicName: Security
          metricName: RouteTableChanges
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Average
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.14 – Ensure a log metric filter and alarm exist for VPC changes
        - alarmName: CIS-3.14-VPCChanges
          alarmDescription: Alarm for VPC changes
          snsTopicName: Security
          metricName: VPCChanges
          namespace: LogMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching



